// <auto-generated />
using System;
using CSMWebCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSMWebCore.Migrations
{
    [DbContext(typeof(ChipsDbContext))]
    [Migration("20200411050418_move-guid-ticket")]
    partial class moveguidticket
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CSMWebCore.Entities.ChipsUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CSMWebCore.Entities.Consultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("CSMWebCore.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactPref")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactPref = 0,
                            Email = "andy@yahoo.com",
                            FirstName = "Andrew",
                            LastName = "Bernard",
                            Phone = "2063953029",
                            StudentId = "830549793"
                        },
                        new
                        {
                            Id = 2,
                            ContactPref = 1,
                            Email = "pam01@gmail.com",
                            FirstName = "Pam",
                            LastName = "Beesly",
                            Phone = "3921235324",
                            StudentId = "223563434"
                        });
                });

            modelBuilder.Entity("CSMWebCore.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Serviced")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("CSMWebCore.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            Description = "Initial event when a device is brought in and a ticket is opened",
                            Name = "Check-In",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            Category = 1,
                            Description = "Final event when a device returned to the customer",
                            Name = "Check-Out",
                            Price = 0m
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            Description = "Final event when a device has been awaiting pickup for 30 days and is sent to Lost and Found",
                            Name = "Lost and Found",
                            Price = 0m
                        },
                        new
                        {
                            Id = 4,
                            Category = 2,
                            Description = "Identification of the issue by inspecting device hardware and software",
                            Name = "Diagnostic",
                            Price = 50m
                        },
                        new
                        {
                            Id = 5,
                            Category = 3,
                            Name = "Data Backup",
                            Price = 150m
                        },
                        new
                        {
                            Id = 6,
                            Category = 3,
                            Name = "Data Restore",
                            Price = 150m
                        },
                        new
                        {
                            Id = 7,
                            Category = 3,
                            Description = "Installation of an OS on a blank drive or over an old OS, writing over existing user data",
                            Name = "OS Installation",
                            Price = 150m
                        },
                        new
                        {
                            Id = 8,
                            Category = 3,
                            Description = "Incremental updates to an OS where user data is preserved",
                            Name = "OS Updates",
                            Price = 50m
                        },
                        new
                        {
                            Id = 9,
                            Category = 3,
                            Name = "Program/Driver Installation",
                            Price = 50m
                        },
                        new
                        {
                            Id = 10,
                            Category = 3,
                            Name = "Virus/Malware Removal",
                            Price = 150m
                        },
                        new
                        {
                            Id = 11,
                            Category = 3,
                            Name = "Other",
                            Price = 50m
                        },
                        new
                        {
                            Id = 12,
                            Category = 4,
                            Name = "Battery Replacement",
                            Price = 50m
                        },
                        new
                        {
                            Id = 13,
                            Category = 4,
                            Name = "Display Replacement",
                            Price = 150m
                        },
                        new
                        {
                            Id = 14,
                            Category = 4,
                            Name = "Hinge Replacement",
                            Price = 150m
                        },
                        new
                        {
                            Id = 15,
                            Category = 4,
                            Name = "Keyboard Replacement",
                            Price = 125m
                        },
                        new
                        {
                            Id = 16,
                            Category = 4,
                            Name = "Power Jack Replacement",
                            Price = 150m
                        },
                        new
                        {
                            Id = 17,
                            Category = 4,
                            Name = "RAM Replacement",
                            Price = 100m
                        },
                        new
                        {
                            Id = 18,
                            Category = 4,
                            Name = "Storage Drive Replacement",
                            Price = 100m
                        },
                        new
                        {
                            Id = 19,
                            Category = 4,
                            Name = "Trackpad Replacement",
                            Price = 150m
                        },
                        new
                        {
                            Id = 20,
                            Category = 4,
                            Name = "Other",
                            Price = 100m
                        },
                        new
                        {
                            Id = 21,
                            Category = 5,
                            Name = "In-Person",
                            Price = 0m
                        },
                        new
                        {
                            Id = 22,
                            Category = 5,
                            Name = "Email",
                            Price = 0m
                        },
                        new
                        {
                            Id = 23,
                            Category = 5,
                            Name = "Phone Call",
                            Price = 0m
                        },
                        new
                        {
                            Id = 24,
                            Category = 5,
                            Name = "Voicemail",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("CSMWebCore.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<string>("UserCreated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CSMWebCore.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckInUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckOutUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedsBackup")
                        .HasColumnType("bit");

                    b.Property<int>("TicketNumber")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CSMWebCore.Entities.XServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Service")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ServicePrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 0m,
                            Service = 0
                        },
                        new
                        {
                            Id = 2,
                            Price = 0m,
                            Service = 1
                        },
                        new
                        {
                            Id = 3,
                            Price = 0m,
                            Service = 2
                        },
                        new
                        {
                            Id = 4,
                            Price = 50m,
                            Service = 3
                        },
                        new
                        {
                            Id = 5,
                            Price = 150m,
                            Service = 4
                        },
                        new
                        {
                            Id = 6,
                            Price = 50m,
                            Service = 5
                        },
                        new
                        {
                            Id = 7,
                            Price = 150m,
                            Service = 6
                        },
                        new
                        {
                            Id = 8,
                            Price = 50m,
                            Service = 7
                        },
                        new
                        {
                            Id = 9,
                            Price = 100m,
                            Service = 8
                        },
                        new
                        {
                            Id = 10,
                            Price = 100m,
                            Service = 9
                        },
                        new
                        {
                            Id = 11,
                            Price = 150m,
                            Service = 10
                        },
                        new
                        {
                            Id = 12,
                            Price = 125m,
                            Service = 11
                        },
                        new
                        {
                            Id = 13,
                            Price = 150m,
                            Service = 12
                        },
                        new
                        {
                            Id = 14,
                            Price = 150m,
                            Service = 13
                        },
                        new
                        {
                            Id = 15,
                            Price = 150m,
                            Service = 14
                        },
                        new
                        {
                            Id = 16,
                            Price = 50m,
                            Service = 15
                        },
                        new
                        {
                            Id = 17,
                            Price = 150m,
                            Service = 16
                        },
                        new
                        {
                            Id = 18,
                            Price = 100m,
                            Service = 17
                        });
                });

            modelBuilder.Entity("CSMWebCore.Entities.XTicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedToHistory")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckInUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckOutUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckedIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckedOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Finished")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedsBackup")
                        .HasColumnType("bit");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("TicketNumber")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TicketsHistory");
                });

            modelBuilder.Entity("CSMWebCore.Entities.XUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Updates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d79d2551-0dd3-44ca-a3e7-56975d54897b",
                            ConcurrencyStamp = "1eab82ec-0919-4f06-b8c9-b1973666d738",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b5fe6107-7604-4674-8423-5479467c943e",
                            ConcurrencyStamp = "7a8f4c65-5bd0-4f6a-b187-7372da5786d3",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "6fa13c67-406b-44cc-a46b-5bbcf6d2f335",
                            ConcurrencyStamp = "01e8d707-c915-4bc6-b1a5-2ef47efbd247",
                            Name = "ReadOnly",
                            NormalizedName = "READONLY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CSMWebCore.Entities.Device", b =>
                {
                    b.HasOne("CSMWebCore.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSMWebCore.Entities.Log", b =>
                {
                    b.HasOne("CSMWebCore.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSMWebCore.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSMWebCore.Entities.Ticket", b =>
                {
                    b.HasOne("CSMWebCore.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSMWebCore.Entities.XUpdate", b =>
                {
                    b.HasOne("CSMWebCore.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CSMWebCore.Entities.ChipsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CSMWebCore.Entities.ChipsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSMWebCore.Entities.ChipsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CSMWebCore.Entities.ChipsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
